/* A binary tree node has data, pointer to left child
   and a pointer to right child 
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */

void printVerticallyDoofer(map<int, vector<int>>& mymap, int level, Node* n) {
		//int data = n->data;
		mymap[level].push_back(n->data);

		if (n->left != NULL) {
			printVerticallyDoofer(mymap, level - 1, n->left);
		}
		if (n->right != NULL) {
			printVerticallyDoofer(mymap, level + 1, n->right);
		}
	}

	void printYourShit(Node* n, map<int, vector<int>>& mymap) {
		map<int, vector<int>>::iterator itr = mymap.begin();
		for (itr = mymap.begin(); itr != mymap.end(); itr++) {
			int s = itr->second.size();
			for (int i = 0; i < s; i++) {
				cout << itr->second[i]<<" ";
			}
			cout << "$";
		}
	}

	void verticalOrder(Node *root) {
		if (root == NULL) {
			return;
		}
		map<int, vector<int>> mymap;
		int level = 0;
		printVerticallyDoofer(mymap, level, root);
		printYourShit(root, mymap);
	}
